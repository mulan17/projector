// Унікальні структури. Створити тип структура, що містить одне поле (наприклад `ID`).
// Написати функцію, яка на вхід приймає слайс з елементами створеного типу, а повертає слайс того ж типу лише з унікальними значеннями
// (структури з дублікатами значення поля відкидаються). Результ функції має бути відсортований у порядку зростання значень поля структури.
// Додаткові умови: Не використовувати бібліотеки для пошуку унікальних значень.
// Використати можливості стандартної бібліотеки `sort` для сортування. Приклад: [{3}, {2}, {1}, {2}] -> [{1}, {2}, {3}]
// створити структуру з полем ід
// функція що приймає слайс з елементами створеного типу

package main

import "fmt"

func main() {
	var arr [3]int //3 is lenght

	arr[0] = 1

	arr[0] = 101

	setArrToFives(arr)

	printArr(arr)

	fmt.Println(len(arr), cap(arr))
}

// функція приймає масив з розміром три типом інт та вказує кожний елемент масиву на 5
func setArrToFives(arr [3]int) {
	arr[0] = 5
	arr[1] = 5
	arr[2] = 5

}

// для і ініціюалізувати ранже масиву, тобто ми хочемо щоб і дорівнювалось індексу масива і пройшлось по всім індексам масиву
func printArr(arr [3]int) {
	for i, v := range arr {
		//ми беремо массив і буде змінюватись елемент масиву який ми отримуемо
		v = 202 //змінна містить елемент масиву, а чи зміниться елемент масиву якщо ми з
		arr [i] = 202
		fmt.Println(i, arr[i], v)
	}

}
